* Font and coding
#+BEGIN_SRC  emacs-lisp
(setq doom-font (font-spec :family "Input" :size 15 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "Input" :size 16))

(set-clipboard-coding-system 'utf-16le-dos)

(after! unicode-fonts
  (dolist (unicode-block '("Cyrillic"
                           "Cyrillic Supplement"))
      (push "Input" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))
#+END_SRC

* Input-method
#+begin_src emacs-lisp
(set-input-method 'russian-computer)
(isearch-toggle-input-method)

(map! "C-c d" #'toggle-input-method)
(map! :map evil-ex-search-keymap "C-d" #'toggle-input-method)
#+end_src

* Org
** Directories
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/roam/areas")
(setq org-agenda-files "~/Dropbox/roam/.agenda_files")
(setq org-roam-directory "~/Dropbox/roam/")
#+end_src

** Bullets
#+begin_src emacs-lisp
(use-package! org-bullets
  :after org
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Habits
#+begin_src emacs-lisp
(use-package! org-habit
  :after org
  :config
  (setq org-habit-following-days 7
        org-habit-preceding-days 35
        org-habit-show-habits t
        org-habit-graph-column 80))
#+end_src
** Capture template
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        `(("t" "Task to inbox" entry  (file "inbox.org")
                          ,(concat "* TODO %?\n"
                                          "/Entered on/ %U")
                          :prepend t :kill-buffer t))))
#+end_src
** Custom agenda
#+begin_src emacs-lisp
(after! org
    (setq org-hide-emphasis-markers t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "PROJ(p!)" "IDEA(i)" "PLAY(y)" "WAIT(w!)" "|"
                      "DONE(d!)" "CANCELLED(c)")))

    (setq org-agenda-span 1)
    (setq org-agenda-start-day "0d")
    (setq org-log-done 'note)
    (setq org-priority-default 65)

    (setq org-sort-agenda-notime-is-late nil)
    (setq org-agenda-tags-todo-honor-ignore-options t)
    (setq org-agenda-todo-ignore-time-comparison-use-seconds t)
    (setq org-agenda-skip-scheduled-if-done t)

    (setq org-agenda-time-grid
        '(nil
        (800 1000 1200 1400 1600 1800 2000)
        "......" "----------------"))

    (setq org-agenda-todo-ignore-timestamp 'future)
    (setq org-agenda-todo-ignore-scheduled 'future)

    (setq org-agenda-custom-commands
        '(("j" "Jedi task list"
            ((tags-todo "TODO=\"TODO\"+PRIORITY=\"A\""
                    ((org-agenda-overriding-header "\nToday")
                    (org-agenda-todo-ignore-scheduled 'all)))
            (agenda "")
            (tags "Closed>=\"<today>\""
                ((org-agenda-overriding-header "Done")))
            (tags-todo "TODO=\"PROJ\""
                ((org-agenda-overriding-header "Projects")))))
            ))
)
#+end_src

** Roam
#+begin_src emacs-lisp
(after! org-roam
    (setq org-roam-dailies-directory "daily/")
    (setq org-roam-dailies-capture-templates
      `(("d" "default" entry
         "* %<%H-%M> %?"
         :if-new
            (file+head "%(concat org-roam-dailies-directory \"/%<%Y-%m-%d>.org\")"
                    "#+title: %<%Y-%m-%d>\n#+filetags: review"))))
)
#+end_src
** Graph
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Spaced repetition
#+begin_src emacs-lisp
(defun my/space-repeat-if-tag-spaced (e)
  "Resets the header on the TODO states and increases the date
according to a suggested spaced repetition interval."
  (let* ((spaced-rep-map '((0 . "++1d")
                           (1 . "++2d")
                           (2 . "++7d")
                           (3 . "++23d")
                           (4 . "++60d")
                           (5 . "++4m")))
         (spaced-key "spaced")
         (tags (org-get-tags))
         (spaced-todo-p (member spaced-key tags))
         (repetition-n (car (cdr spaced-todo-p)))
         (n+1 (if repetition-n (+ 1 (string-to-number (substring repetition-n (- (length repetition-n) 1) (length repetition-n)))) 0))
         (spaced-repetition-p (alist-get n+1 spaced-rep-map))
         (new-repetition-tag (concat "repetition" (number-to-string n+1)))
         (new-tags (reverse (if repetition-n
                                (seq-reduce
                                 (lambda (a x) (if (string-equal x repetition-n) (cons new-repetition-tag a) (cons x a)))
                                 tags
                                 '())
                              (seq-reduce
                               (lambda (a x) (if (string-equal x spaced-key) (cons new-repetition-tag (cons x a)) (cons x a)))
                               tags
                               '())))))
    (if (and spaced-todo-p spaced-repetition-p)
        (progn
          ;; avoid infinitive looping
          (remove-hook 'org-trigger-hook 'my/space-repeat-if-tag-spaced)
          ;; reset to previous state
          (org-call-with-arg 'org-todo 'left)
          ;; schedule to next spaced repetition
          (org-schedule nil (alist-get n+1 spaced-rep-map))
          ;; rewrite local tags
          (org-set-tags-to new-tags)
          (add-hook 'org-trigger-hook 'my/space-repeat-if-tag-spaced))
      )))

(add-hook 'org-trigger-hook 'my/space-repeat-if-tag-spaced)
#+end_src
* Projectile
#+begin_src emacs-lisp
(after! projectile
(setq projectile-project-search-path '("~/EmacsProjects" "~/PyCharmProjects"))
)
#+end_src
* PlantUML
#+begin_src emacs-lisp
    ;; Sample jar configuration
    (setq plantuml-jar-path "~/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar)

    ;; Sample executable configuration
;;    (setq plantuml-executable-path "/path/to/your/copy/of/plantuml.bin")
;;    (setq plantuml-default-exec-mode 'executable)
#+end_src
